@import './custom-media.css';

@keyframes fade {
	from {
		opacity: 0;
	}
}

@keyframes fade-out {
	to {
		opacity: 1;
	}
}

@keyframes blink {
	from {
		opacity: 0;
	}
	50% {
		opacity: 1;
	}
	to {
		opacity: 0;
	}
}

:root {
	font-size: 10px;

	--color-primary-light: #e895a1;
	--color-primary: #e17381;
	--color-primary-dark: #cb6775;
	--color-secondary-light: #b0b8ee;
	--color-secondary: #7382e1;
	--color-secondary-dark: #5a66b1;
	--color-tertiary-light: #dd95e8;
	--color-tertiary: #bd67cb;
	--color-tertiary-dark: #894b93;

	--color-grey-lightest: #f9f9fa;
	--color-grey-light: #dfe0e6;
	--color-grey: #c1c3cf;
	--color-grey-dark: #858898;
	--color-grey-darkest: #3d3e46;

	--shadow-soft: 0 1.6rem 4rem rgba(61, 62, 70, 0.3), 0 0.4rem 1rem rgba(61, 62, 70, 0.1);
	--shadow-soft-shallow: 0 1rem 2.7rem rgba(61, 62, 70, 0.3), 0 0.3rem 1.2rem rgba(61, 62, 70, 0.1);
	--shadow-soft-deep: 0 2.1rem 5.3rem rgba(61, 62, 70, 0.3), 0 0.5rem 1.3rem rgba(61, 62, 70, 0.1);
	--shadow-soft-drop: drop-shadow(0 1.6rem 4rem rgba(--color-grey-darkest, 0.3))
		drop-shadow(0 0.4rem 1rem rgba(--color-grey-darkest, 0.1));

	--font-bold: 900;
	--line-height: 1.17;
	--size-1: 1.2rem;
	--size-2: 1.4rem;
	--size-3: 1.6rem;
	--size-4: 1.8rem;
	--size-5: 2rem;
	--size-6: 2.4rem;
	--size-7: 3.6rem;
	--size-8: 4.8rem;
	--size-9: 7.2rem;
	--size-10: 12.8rem;

	--space-1: 0.4rem;
	--space-2: 0.8rem;
	--space-3: 1.6rem;
	--space-4: 3.2rem;
	--space-5: 6.4rem;
	--space-6: 12.8rem;
	--space-7: 25.6rem;
	--space-8: 51.2rem;

	--grid-template-columns-desktop: 4rem 6rem 1fr 6rem 4rem;
	--grid-template-columns-tablet: 2rem 6rem 1fr 6rem 2rem;
	--grid-template-columns-mobile: 2rem 2rem calc(100vw - 8rem) 2rem 2rem;
	--grmid-row-1-desktop: var(--space-7);
	--grid-row-1-tablet: 16rem;
	--grid-row-1-mobile: 9.6rem;
}

html {
	scroll-behavior: smooth;
}

body {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	display: flex;
	justify-content: center;
	margin: 0;
	background-color: var(--color-grey-lightest);
	color: var(--color-grey-darkest);
	font-family: 'Lato', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',
		'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
	font-size: var(--size-3);
	line-height: var(--line-height);
}

blockquote,
body,
dd,
dl,
figure,
h1,
h2,
h3,
h4,
p {
	:where(&) {
		margin: 0;
	}
}

[id='root'] {
	width: 100%;
}

code {
	font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

h1,
.h1 h2,
.h2 h3,
.h3 h4,
.h4,
strong {
	font-weight: var(--font-bold);
	margin: 0;
}

h1,
.h1 {
	font-size: var(--size-8);
}

h2,
.h2 {
	font-size: var(--size-7);
}

h3,
.h3 {
	font-size: var(--size-6);
}

h4,
.h4 {
	font-size: var(--size-5);
	font-weight: 400;
}

@media (--bp-tablet) {
	h1,
	.h1 {
		font-size: var(--size-9);
	}

	h2,
	.h2 {
		font-size: var(--size-8);
	}

	h3,
	.h3 {
		font-size: var(--size-7);
	}

	h4,
	.h4 {
		font-size: var(--size-6);
	}
}

@media (--bp-desktop) {
	h1,
	.h1 {
		font-size: var(--size-10);
	}

	h2,
	.h2 {
		font-size: var(--size-9);
	}

	h3,
	.h3 {
		font-size: var(--size-8);
	}
}

a {
	--link-color: var(--color-primary);
	--link-color--visited: var(--color-secondary);
	--link-color--hover: var(--color-grey-darkest);
	color: var(--link-color);
	text-decoration: none;
	position: relative;
	transition: color 0.2s;

	&::after {
		content: '';
		width: 110%;
		height: 110%;
		position: absolute;
		background-color: var(--link-color);
		opacity: 0;
		left: -5%;
		top: -5%;
		transition: background-color 0.2s, opacity 0.2s;
		border-radius: 0.2rem;
	}

	&:visited {
		--link-color: var(--link-color--visited);
	}

	&:hover,
	&:active {
		--link-color: var(--link-color--hover);
	}

	&:hover::after {
		opacity: 0.2;
	}

	&:active::after {
		opacity: 0.3;
	}

	& svg {
		fill: currentColor;
	}
}

header,
section,
footer {
	display: grid;
	grid-template-columns: var(--grid-template-columns-mobile);

	@media (--bp-tablet) {
		grid-template-columns: var(--grid-template-columns-tablet);
	}

	@media (--bp-desktop) {
		grid-template-columns: var(--grid-template-columns-desktop);
	}
}

.sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

.soft-shadow {
	box-shadow: var(--shadow-soft);

	&.button {
		transition: box-shadow 0.2s, color 0.2s, background-color 0.2s, transform 0.2s;

		&:hover {
			box-shadow: var(--shadow-soft-deep);
		}

		&:active {
			box-shadow: var(--shadow-soft-shallow);
		}
	}
}

.highlight {
	--highlight: var(--color-primary);
	position: relative;
	padding: var(--space-2);

	/* Until we can pass variables to encoded svgs, we will have to contruct the square using gradients */
	/* Slightly off transparency percent gives impression of anti-alaising */
	background-image: radial-gradient(var(--highlight) 70%, transparent 75%),
		radial-gradient(var(--highlight) 70%, transparent 75%),
		radial-gradient(var(--highlight) 70%, transparent 75%),
		radial-gradient(var(--highlight) 70%, transparent 75%),
		linear-gradient(90deg, var(--highlight), var(--highlight)),
		linear-gradient(90deg, var(--highlight), var(--highlight));
	background-size: var(--space-2) var(--space-2), var(--space-2) var(--space-2),
		var(--space-2) var(--space-2), var(--space-2) var(--space-2), 100% calc(50% - var(--space-1)),
		calc(100% - var(--space-2)) calc(50% + var(--space-1));
	background-position: left center, right center, left bottom, right bottom,
		left calc(100% - var(--space-1)), var(--space-1) 100%;

	&:where(.primary) {
		--highlight: var(--color-primary);
	}

	&:where(.secondary) {
		--highlight: var(--color-secondary);
	}

	&:where(.tertiary) {
		--highlight: var(--color-tertiary);
	}

	&:where(.grey-light) {
		--highlight: var(--color-grey-light);
	}
}

.page {
	display: grid;
	overflow-x: hidden;
	width: 100%;
	transition: opacity 0.5s ease-out, transform 0.5s;

	> :where(.inner) {
		width: 100%;
		max-width: 144rem;
		margin: auto;
	}
}

.fade {
	animation: fade 1s both;

	&:where(.delayed) {
		animation-delay: 500ms;
	}
}

.blink {
	&:empty {
		background: currentColor;
		animation: blink 1.5s both infinite ease;
		animation-delay: 2s;

		&::after {
			content: '_';
		}
	}
}
